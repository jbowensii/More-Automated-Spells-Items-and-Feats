{"name":"Elemental Adept (Cold)","type":"feat","img":"icons/magic/water/projectile-ice-chunk-blue.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to cold damage, and when you roll damage for a spell you cast that deals cold damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"JqR0VfQcqj7o2sC4","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Cold),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/ice_09.jpg","label":"Elemental Adept (Cold)","origin":"Item.7Y7UQFlA6C65Hb7n","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":54,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":39,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.spxwZqUg9ypdgEug"},"scene-packer":{"hash":"48a6bcbedfabcc20339e92089a3fa2c36a24f13e","sourceId":"Item.if8IOf9bKgUpIAjw"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Cold)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"cold\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"8JJSWeLJZNXcCJzw"}
{"name":"Elemental Adept (Acid)","type":"feat","img":"icons/magic/acid/projectile-faceted-glob.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to acid damage, and when you roll damage for a spell you cast that deals acid damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"HlLfTD8QAW6eXGd9","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Acid),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/affliction_20.jpg","label":"Elemental Adept (Acid)","origin":"Item.W1CFtJ3Hs6z20Gw9","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":53,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":38,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.aYmO2viJd9HdlSvF"},"scene-packer":{"hash":"915bf1251d68787137e5415cbd691a965575b6ec","sourceId":"Item.We1FRbzmgNviJz92"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Acid)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"acid\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"BiQeSfs8NJwQ4O4G"}
{"name":"Elemental Adept (Lightning)","type":"feat","img":"icons/magic/lightning/bolt-strike-blue.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to lightning damage, and when you roll damage for a spell you cast that deals lightning damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":null},"effects":[{"_id":"0SBwS29D7tWLF8Yk","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Lightning),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/blue_21.jpg","label":"Elemental Adept (Lightning)","origin":"Item.lEyT5M1i5szqhLsu","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":56,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":41,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.s72265V0lwRI4Q42"},"scene-packer":{"hash":"15df69ce6571bdb8fddd6ec44a068c9db81a84f2","sourceId":"Item.XU7VhRo3F0qtU7Fh"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Lightning)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"lightning\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"CqDQqaEAbGuskEIe"}
{"name":"Elemental Adept (Thunder)","type":"feat","img":"icons/magic/fire/projectile-fireball-purple.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to thunder damage, and when you roll damage for a spell you cast that deals thunder damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"Ep7NrHqaoJ5py0kF","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Thunder),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/shadow_06.jpg","label":"Elemental Adept (Thunder)","origin":"Item.d7JuHA9yOhcz7q82","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":57,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":42,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.T47bqSNeXlJT56NH"},"scene-packer":{"hash":"48bff66aa435d9e22c22a8cc5c2b2f02cfbdb896","sourceId":"Item.x8COwK5sdVbcxuiJ"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Thunder)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"thunder\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"Dy9DoxyqUX01t2QF"}
{"name":"Orcish Fury","type":"feat","img":"icons/skills/social/intimidation-impressing.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"XGtE p73","activation":{"type":"special","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":"self"},"uses":{"value":null,"max":"","per":""},"consume":{"type":"attribute","target":"","amount":1},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Orcish Fury","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"YJK1tQQIV2Ycrqy0","changes":[{"key":"flags.dnd5e.DamageBonusMacro","mode":0,"value":"ItemMacro.Orcish Fury,postDamageRoll","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/red_01.jpg","label":"Orcish Fury","origin":"Item.5PUe0GiheEHUomoR","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false},"dnd5e-helpers":{"rest-effect":"Ignore"}},"tint":null,"selectedKey":"flags.dnd5e.DamageBonusMacro"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"34e1e0f2d249c205ba6dccc546085e634826e3de","sourceId":"Item.icHG0ETXcH71xh1y"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Orcish Fury","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nOrcish Fury\n\nUSEAGE : AUTOMATIC\nThis item should be placed on the character that has the Orcish Fury Feat.  \nUntil used, during each melee attack the player will be prompted if they\nwant to use this ability.\n \nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \nBug fixes provided by tposney#1462 and callbritton#5405 thank you both\n*****/\n\n// make sure the attempted hit was made with a weapon attack\n\nif (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\nconst pcActor = MidiQOL.MQfromActorUuid(args[0].actorUuid);\nif (args[0].hitTargetUuids.length === 0) return;\nconst target = await fromUuid(args[0].hitTargetUuids[0] ?? \"\");\n\n// check to make sure only one target is selected\nif ((args[0].targetUuids.length < 1) || (args[0].targetUuids.length > 1)) {\n    ui.notifications.error(\"You need to select a single target.\");\n    return;\n}\n\n// Find Superiority Dice Resource\nlet orcishFury = await findSheetResource(pcActor, \"Orcish Fury\");\nif (!orcishFury) {\n    ui.notifications.error(\"Could not find a resource labeled 'Orcish Fury'...\");\n    return;\n} else if (orcishFury.value < 1) return;\n\n// create a dialog and prompt to spend a superiority die\nlet dialog = new Promise((resolve) => {\n    new Dialog({\n        // localize this text\n        title: \"Orcish Fury:\",\n        content: \"<p>Use Orcish Fury for extra damage?</p>\",\n        buttons: {\n            one: {\n                icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/red_01.jpg\" width=\"60\" height=\"60\"></>',\n                label: \"<p>Yes</p>\",\n                callback: () => resolve(true)\n            },\n            two: {\n                icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/weapon_28.jpg\" width=\"60\" height=\"60\"></>',\n                label: \"<p>No</p>\",\n                callback: () => { resolve(false) }\n            }\n        },\n        default: \"two\"\n    }).render(true);\n});\nlet choice = await dialog;\n\nif (!choice) return;\n\n// if YES subtract a superiorty die\nawait decrimentSheetResource(pcActor, \"Orcish Fury\", 1);\n\n// get the live MIDI-QOL workflow so we can make changes\nconst diceMult = args[0].isCritical ? 2 : 1;\nlet baseDice = (1 * diceMult);\nlet die = args[0].item.data.damage.parts[0][0].split('[')[0];   // everything before the [\ndie = die.toLowerCase();                                        // convert the string to lower case\nlet baseDie = die.split('d')[1];                                //everything after the 'd' the die size and any mods\nlet furyRoll = (baseDice + \"d\" + baseDie);                          // assemble the FuryRoll\n\nconst damageType = args[0].item.data.damage.parts[0][1];        // get teh damage type from the weapon in use   \n\nreturn { damageRoll: `${furyRoll}[${damageType}]`, flavor: \"Orcish Fury\" };\n\n\n//---------------------------------- MY FUNCTIONS -------------------------------------\n\n// Test for available resource\n// Return resource object\nasync function findSheetResource(testActor, resourceName) {\n    let resources = Object.values(testActor.data.data.resources);\n    let foundResource = resources.find(i => i.label.toLowerCase() === resourceName.toLowerCase());\n    return foundResource;\n}\n\n// Decriment available resource\nasync function decrimentSheetResource(testActor, resourceName, numValue) {\n    let actorDup = duplicate(testActor);\n    let resources = Object.values(actorDup.data.resources);\n    let foundResource = resources.find(i => i.label.toLowerCase() === resourceName.toLowerCase());\n    foundResource.value = foundResource.value - numValue;\n    await testActor.update(actorDup);\n    return;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"9.268","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true},"link-item-resource-5e":{"resource-link":""}},"_id":"QKwxkPpjAF3EkDdt"}
{"name":"Piercer","type":"feat","img":"icons/skills/ranged/arrow-flying-broadhead-metal.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"TCoE p80","activation":{"type":"special","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Piercer","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"5LsTTEo1APQ0w520","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Piercer,all","priority":"20"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/arrow_01.jpg","label":"Piercer","origin":"Item.Aj6rMauKBQFNOrub","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"8db71c108fee35b72277e7a40b1222c22f110923","sourceId":"Item.LPlRoxAiHtniLltL"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Piercer","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nPiercer\n\nUSAGE: Automatic just place on a character \n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\nif (args[0].macroPass === \"postDamageRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    const actorUuid = workflow.tokenUuid;\n    const actorToken = canvas.tokens.get(workflow.tokenId);\n    const thisItem = actorToken.actor.items.find(i => i.name === \"Piercer\")?.data;\n\n    // make sure the attempted hit was made with a weapon attack\n    if (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\n    // damage type must be \"piercing\"    \n    if (workflow.defaultDamageType != \"piercing\") return;\n\n    // breakdown weapon damage to find the base die, if there was a critical, and the lowest die roll\n    let baseDie = null;\n    let lowestDieRoll = 0;\n    for (let i = 0; i < workflow.damageRoll.terms.length; i++)\n        if (workflow.damageRoll.terms[i]?.faces) {\n            baseDie = \"1d\" + workflow.damageRoll.terms[i].faces;\n            lowestDieRoll = workflow.damageRoll.terms[i].results[0].result;\n            for (let j = 0; j < workflow.damageRoll.terms[i].results.length; j++)\n                if (workflow.damageRoll.terms[i].results[j].result < lowestDieRoll) lowestDieRoll = workflow.damageRoll.terms[i].results[j].result;\n        }\n\n    // create a dialog and prompt to re-roll lowest die\n    let dialog = new Promise((resolve) => {\n        new Dialog({\n            // localize this text\n            title: \"Piercer Feat:\",\n            content: `<p>would you like to re-roll your lowest damage die?</p><p>Lowest Die Roll: ${lowestDieRoll}</p>`,\n            buttons: {\n                one: {\n                    icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/arrow_01.jpg\" width=\"60\" height=\"60\"></>',\n                    label: \"<p>Yes</p>\",\n                    callback: () => resolve(true)\n                },\n                two: {\n                    icon: '<p> </p><img src = \"icons/svg/cancel.svg\" width=\"60\" height=\"60\"></>',\n                    label: \"<p>No</p>\",\n                    callback: () => { resolve(false) }\n                }\n            },\n            default: \"two\"\n        }).render(true);\n    });\n    let choice = await dialog;\n\n    if (choice) await setProperty(workflow, \"ReplaceRoll\", choice);\n    await setProperty(workflow, \"LowestRoll\", lowestDieRoll);\n    await setProperty(workflow, \"BaseDie\", baseDie);\n\n    // trigger BonusDamage to apply the extra damage / adjustments outside of the normal damage roll\n    let effectData = {\n        label: \"Piercer reRoll\",\n        changes: [{ key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.Piercer`, priority: 20 }],\n        icon: thisItem.img,\n        origin: thisItem.uuid,\n        duration: { turns: 1 }\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: actorUuid, effects: [effectData] });\n    return;\n\n} else if (args[0].tag === \"DamageBonus\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    const actorUuid = workflow.tokenUuid;\n    const actorToken = canvas.tokens.get(workflow.tokenId);\n    const thisItem = actorToken.actor.items.find(i => i.name === \"Piercer\")?.data;\n    const targetToken = await fromUuid(args[0].hitTargetUuids[0] ?? \"\");\n    const targetActor = targetToken.actor;\n    let choice = await getProperty(workflow, \"ReplaceRoll\");\n    let lowestDieRoll = await getProperty(workflow, \"LowestRoll\");\n    let baseDie = await getProperty(workflow, \"BaseDie\");\n    let reRoll = null;\n\n    // remove extra damage effect \n    let effect = await findEffect(actorToken, \"Piercer reRoll\");\n    await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: actorUuid, effects: [effect.id] });\n\n    // test if critical is true, apply extra damage die\n    if (workflow?.isCritical) {\n        reRoll = await new Roll(baseDie).roll();\n        new MidiQOL.DamageOnlyWorkflow(targetActor, targetToken, reRoll.total, \"piercing\", [targetToken], reRoll, { flavor: \"Piercer Feat: Critical Extra Damage\", itemData: thisItem, itemCardId: \"new\" });\n    }\n\n    // if reRoll was selected figure out the difference and apply adjustment to the target\n    if (choice) {\n        reRoll = await new Roll(baseDie).roll();\n        if (reRoll.result < lowestDieRoll) {\n            // healback difference\n            let difference = lowestDieRoll - reRoll.result;\n            return { damageRoll: `${difference}[healing]`, flavor: \"Piercer Feat: ReRoll Adjustment\" }\n        } else {\n            // damage difference\n            let difference = reRoll.result - lowestDieRoll;\n            return { damageRoll: `${difference}[piercing]`, flavor: \"Piercer Feat: ReRoll Adjustment\" }\n        }\n    }\n    return;\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"test","system":"dnd5e","coreVersion":"9.255","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true}},"_id":"XPryDpJ79KS4Elna"}
{"name":"Slasher","type":"feat","img":"icons/skills/melee/blade-tips-triple-bent-white.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"TCoE p81","activation":{"type":"special","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Slasher","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"5LsTTEo1APQ0w520","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Slasher,preDamageRoll","priority":"20"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/weapon_34.jpg","label":"Slasher","origin":"Item.Aj6rMauKBQFNOrub","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"236b9a98a1d0b4db7f6fe1d2189e49a7d2e54745","sourceId":"Item.CQe7aJptcXa6qlv1"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Slasher","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nSlasher\n\nUSAGE: Automatic just place on a character \n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a weapon attack\nif (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\nif (args[0].macroPass === \"preDamageRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    let targetToken = await fromUuid(args[0].hitTargetUuids[0]);\n    let targetActor = targetToken.actor;\n    let theItem = workflow.item.data.data;\n\n    if (theItem.damage.parts[0][1] !== \"slashing\") return;   // not a slashing weapon  \n    else {\n        let effect = await findEffect(targetActor, \"Reduced Movement\");\n        if (!effect) await applyReduceMovementEffect(targetActor, args[0].uuid);\n        if (workflow.isCritical) await applyAttackDisadvantageEffect(targetActor, args[0].uuid);\n    }\n    return;\n}\n\n// Apply the fightened effect to the target\nasync function applyReduceMovementEffect(target, originUuid) {\n    let effectData = {\n        label: \"Reduced Movement\",\n        icon: \"systems/dnd5e/icons/items/equipment/boots-leather.jpg\",\n        origin: originUuid,\n        changes: [{ \"key\": \"data.attributes.movement.all\", \"value\": `-10`, \"mode\": 0, \"priority\": 20 }],\n        disabled: false,\n        flags: { dae: { specialDuration: [\"turnStartSource\"] }, }\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Apply the fightened effect to the target\nasync function applyAttackDisadvantageEffect(target, originUuid) {\n    let effectData = {\n        label: \"Attack Disadvantage\",\n        icon: \"systems/dnd5e/icons/skills/weapon_08.jpg\",\n        origin: originUuid,\n        changes: [{ \"key\": \"flags.midi-qol.disadvantage.attack.all\", \"value\": `1`, \"mode\": 0, \"priority\": 20 }],\n        disabled: false,\n        flags: { dae: { specialDuration: [\"turnStartSource\"] }, }\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(thisActor, effectName) {\n    let effectUuid = null;\n    effectUuid = thisActor?.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"test","system":"dnd5e","coreVersion":"9.255","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true}},"_id":"aZQRwVlwqLCdQanO"}
{"name":"Elemental Adept (Fire)","type":"feat","img":"icons/magic/fire/projectile-embers-orange.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to fire damage, and when you roll damage for a spell you cast that deals fire damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"6pZRLDO4MLABT5r8","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Fire),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/fire_10.jpg","label":"Elemental Adept (Fire)","origin":"Item.c7fTdFwzwAGUSo2w","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":55,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":40,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.p2Wr0BPOrQ1FxCfv"},"scene-packer":{"hash":"8a579b89d38b275569019ca1ebd3db767b6ec3ce","sourceId":"Item.KtVqlihoZrOSZQls"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Fire)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"fire\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"yGH7t3aWKMS90FpW"}
{"$$deleted":true,"_id":"BiQeSfs8NJwQ4O4G"}
{"$$deleted":true,"_id":"8JJSWeLJZNXcCJzw"}
{"$$deleted":true,"_id":"yGH7t3aWKMS90FpW"}
{"$$deleted":true,"_id":"CqDQqaEAbGuskEIe"}
{"$$deleted":true,"_id":"Dy9DoxyqUX01t2QF"}
{"$$deleted":true,"_id":"QKwxkPpjAF3EkDdt"}
{"$$deleted":true,"_id":"XPryDpJ79KS4Elna"}
{"$$deleted":true,"_id":"aZQRwVlwqLCdQanO"}
{"name":"Elemental Adept (Acid)","type":"feat","img":"icons/magic/acid/projectile-faceted-glob.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to acid damage, and when you roll damage for a spell you cast that deals acid damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"HlLfTD8QAW6eXGd9","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Acid),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/affliction_20.jpg","label":"Elemental Adept (Acid)","origin":"Item.W1CFtJ3Hs6z20Gw9","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":53,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":38,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.aYmO2viJd9HdlSvF"},"scene-packer":{"hash":"46a61a9c2d30a0ee2dfd307c9b56a9a6df701325","sourceId":"Item.We1FRbzmgNviJz92"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Acid)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"acid\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"Xnd7Pblz7dEMmCnc"}
{"name":"Elemental Adept (Cold)","type":"feat","img":"icons/magic/water/projectile-ice-chunk-blue.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to cold damage, and when you roll damage for a spell you cast that deals cold damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"JqR0VfQcqj7o2sC4","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Cold),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/ice_09.jpg","label":"Elemental Adept (Cold)","origin":"Item.7Y7UQFlA6C65Hb7n","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":54,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":39,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.spxwZqUg9ypdgEug"},"scene-packer":{"hash":"a5e4e56c7e3681d1de6c2008c72c354b76c61d8b","sourceId":"Item.if8IOf9bKgUpIAjw"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Cold)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"cold\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"izAKsJJx580YMmgF"}
{"name":"Elemental Adept (Fire)","type":"feat","img":"icons/magic/fire/projectile-embers-orange.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to fire damage, and when you roll damage for a spell you cast that deals fire damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"6pZRLDO4MLABT5r8","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Fire),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/fire_10.jpg","label":"Elemental Adept (Fire)","origin":"Item.c7fTdFwzwAGUSo2w","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":55,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":40,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.p2Wr0BPOrQ1FxCfv"},"scene-packer":{"hash":"5991e85f117a3f477c558b5192409910324698da","sourceId":"Item.KtVqlihoZrOSZQls"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Fire)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"fire\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"60W0bz6ZLtld9aD7"}
{"name":"Elemental Adept (Lightning)","type":"feat","img":"icons/magic/lightning/bolt-strike-blue.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to lightning damage, and when you roll damage for a spell you cast that deals lightning damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":null},"effects":[{"_id":"0SBwS29D7tWLF8Yk","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Lightning),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/blue_21.jpg","label":"Elemental Adept (Lightning)","origin":"Item.lEyT5M1i5szqhLsu","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":56,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":41,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.s72265V0lwRI4Q42"},"scene-packer":{"hash":"f0f221b5efda9b8e8e8f813342bbf437401da7da","sourceId":"Item.XU7VhRo3F0qtU7Fh"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Lightning)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"lightning\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"fott9JjtkowOl67s"}
{"name":"Elemental Adept (Thunder)","type":"feat","img":"icons/magic/fire/projectile-fireball-purple.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"Spells you cast ignore resistance to thunder damage, and when you roll damage for a spell you cast that deals thunder damage, you can treat any 1 on a damage die as a 2.\n\n","unidentified":""},"source":"Player's Handbook","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"The ability to cast at least one spell","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"Ep7NrHqaoJ5py0kF","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Elemental Adept (Thunder),all","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/shadow_06.jpg","label":"Elemental Adept (Thunder)","origin":"Item.d7JuHA9yOhcz7q82","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"featId":57,"version":"2.9.8","prerequisites":[{"description":"The ability to cast at least one spell","prerequisiteMappings":[{"id":42,"entityId":null,"entityTypeId":null,"type":"custom-value","subType":"the-ability-to-cast-at-least-one-spell","value":null,"friendlyTypeName":"Custom Value","friendlySubTypeName":"The ability to cast at least one spell"}]}]},"obsidian":{"source":{"type":"feat"}},"core":{"sourceId":"Compendium.world.ddb-feats.T47bqSNeXlJT56NH"},"scene-packer":{"hash":"c476873bba3a8c52ad91f14f2487de02d3d12879","sourceId":"Item.x8COwK5sdVbcxuiJ"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Elemental Adept (Thunder)","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nElemental Adept \n\nUSAGE: This is fully automated, just place on a character\n\nworkflow: spell damage\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\", \"rsak\", \"save\"].includes(args[0].item.data.actionType)) return;\nconst damageType = \"thunder\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n    const targets = args[0].targets;\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]);\n        });\n    }\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i = 0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice + \"min2\" + \"[\" + damageType + \"]\";\n            itemData.scaling.formula = itemData.scaling.formula + \"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: targetActor.uuid, effects: [effect.id] });\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return;\n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label: \"EAVulnerability\",\n        icon: \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n            \"key\": \"data.traits.dv.value\",\n            \"value\": `${damageType}`,\n            \"mode\": 2,\n            \"priority\": 20\n        }],\n        disabled: false\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}}},"_id":"eRKUPoUSrR1cVRzC"}
{"name":"Orcish Fury","type":"feat","img":"icons/skills/social/intimidation-impressing.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"XGtE p73","activation":{"type":"special","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":"self"},"uses":{"value":null,"max":"","per":""},"consume":{"type":"attribute","target":"","amount":1},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Orcish Fury","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"YJK1tQQIV2Ycrqy0","changes":[{"key":"flags.dnd5e.DamageBonusMacro","mode":0,"value":"ItemMacro.Orcish Fury,postDamageRoll","priority":"1"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/red_01.jpg","label":"Orcish Fury","origin":"Item.5PUe0GiheEHUomoR","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false},"dnd5e-helpers":{"rest-effect":"Ignore"}},"tint":null,"selectedKey":"flags.dnd5e.DamageBonusMacro"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"563ead9d865c0eebd9b5ba374c48c3cc4c79612f","sourceId":"Item.icHG0ETXcH71xh1y"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Orcish Fury","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nOrcish Fury\n\nUSEAGE : AUTOMATIC\nThis item should be placed on the character that has the Orcish Fury Feat.  \nUntil used, during each melee attack the player will be prompted if they\nwant to use this ability.\n \nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \nBug fixes provided by tposney#1462 and callbritton#5405 thank you both\n*****/\n\n// make sure the attempted hit was made with a weapon attack\n\nif (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\nconst pcActor = MidiQOL.MQfromActorUuid(args[0].actorUuid);\nif (args[0].hitTargetUuids.length === 0) return;\nconst target = await fromUuid(args[0].hitTargetUuids[0] ?? \"\");\n\n// check to make sure only one target is selected\nif ((args[0].targetUuids.length < 1) || (args[0].targetUuids.length > 1)) {\n    ui.notifications.error(\"You need to select a single target.\");\n    return;\n}\n\n// Find Superiority Dice Resource\nlet orcishFury = await findSheetResource(pcActor, \"Orcish Fury\");\nif (!orcishFury) {\n    ui.notifications.error(\"Could not find a resource labeled 'Orcish Fury'...\");\n    return;\n} else if (orcishFury.value < 1) return;\n\n// create a dialog and prompt to spend a superiority die\nlet dialog = new Promise((resolve) => {\n    new Dialog({\n        // localize this text\n        title: \"Orcish Fury:\",\n        content: \"<p>Use Orcish Fury for extra damage?</p>\",\n        buttons: {\n            one: {\n                icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/red_01.jpg\" width=\"60\" height=\"60\"></>',\n                label: \"<p>Yes</p>\",\n                callback: () => resolve(true)\n            },\n            two: {\n                icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/weapon_28.jpg\" width=\"60\" height=\"60\"></>',\n                label: \"<p>No</p>\",\n                callback: () => { resolve(false) }\n            }\n        },\n        default: \"two\"\n    }).render(true);\n});\nlet choice = await dialog;\n\nif (!choice) return;\n\n// if YES subtract a superiorty die\nawait decrimentSheetResource(pcActor, \"Orcish Fury\", 1);\n\n// get the live MIDI-QOL workflow so we can make changes\nconst diceMult = args[0].isCritical ? 2 : 1;\nlet baseDice = (1 * diceMult);\nlet die = args[0].item.data.damage.parts[0][0].split('[')[0];   // everything before the [\ndie = die.toLowerCase();                                        // convert the string to lower case\nlet baseDie = die.split('d')[1];                                //everything after the 'd' the die size and any mods\nlet furyRoll = (baseDice + \"d\" + baseDie);                          // assemble the FuryRoll\n\nconst damageType = args[0].item.data.damage.parts[0][1];        // get teh damage type from the weapon in use   \n\nreturn { damageRoll: `${furyRoll}[${damageType}]`, flavor: \"Orcish Fury\" };\n\n\n//---------------------------------- MY FUNCTIONS -------------------------------------\n\n// Test for available resource\n// Return resource object\nasync function findSheetResource(testActor, resourceName) {\n    let resources = Object.values(testActor.data.data.resources);\n    let foundResource = resources.find(i => i.label.toLowerCase() === resourceName.toLowerCase());\n    return foundResource;\n}\n\n// Decriment available resource\nasync function decrimentSheetResource(testActor, resourceName, numValue) {\n    let actorDup = duplicate(testActor);\n    let resources = Object.values(actorDup.data.resources);\n    let foundResource = resources.find(i => i.label.toLowerCase() === resourceName.toLowerCase());\n    foundResource.value = foundResource.value - numValue;\n    await testActor.update(actorDup);\n    return;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"testWorld","system":"dnd5e","coreVersion":"9.268","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true},"link-item-resource-5e":{"resource-link":""}},"_id":"x0256saNfq37WDH5"}
{"name":"Piercer","type":"feat","img":"icons/skills/ranged/arrow-flying-broadhead-metal.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"TCoE p80","activation":{"type":"special","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Piercer","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"5LsTTEo1APQ0w520","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Piercer,all","priority":"20"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/arrow_01.jpg","label":"Piercer","origin":"Item.Aj6rMauKBQFNOrub","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"c5058b8a68c809f3f885576ac6a33b1f5f156370","sourceId":"Item.LPlRoxAiHtniLltL"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Piercer","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nPiercer\n\nUSAGE: Automatic just place on a character \n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\nif (args[0].macroPass === \"postDamageRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    const actorUuid = workflow.tokenUuid;\n    const actorToken = canvas.tokens.get(workflow.tokenId);\n    const thisItem = actorToken.actor.items.find(i => i.name === \"Piercer\")?.data;\n\n    // make sure the attempted hit was made with a weapon attack\n    if (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\n    // damage type must be \"piercing\"    \n    if (workflow.defaultDamageType != \"piercing\") return;\n\n    // breakdown weapon damage to find the base die, if there was a critical, and the lowest die roll\n    let baseDie = null;\n    let lowestDieRoll = 0;\n    for (let i = 0; i < workflow.damageRoll.terms.length; i++)\n        if (workflow.damageRoll.terms[i]?.faces) {\n            baseDie = \"1d\" + workflow.damageRoll.terms[i].faces;\n            lowestDieRoll = workflow.damageRoll.terms[i].results[0].result;\n            for (let j = 0; j < workflow.damageRoll.terms[i].results.length; j++)\n                if (workflow.damageRoll.terms[i].results[j].result < lowestDieRoll) lowestDieRoll = workflow.damageRoll.terms[i].results[j].result;\n        }\n\n    // create a dialog and prompt to re-roll lowest die\n    let dialog = new Promise((resolve) => {\n        new Dialog({\n            // localize this text\n            title: \"Piercer Feat:\",\n            content: `<p>would you like to re-roll your lowest damage die?</p><p>Lowest Die Roll: ${lowestDieRoll}</p>`,\n            buttons: {\n                one: {\n                    icon: '<p> </p><img src = \"systems/dnd5e/icons/skills/arrow_01.jpg\" width=\"60\" height=\"60\"></>',\n                    label: \"<p>Yes</p>\",\n                    callback: () => resolve(true)\n                },\n                two: {\n                    icon: '<p> </p><img src = \"icons/svg/cancel.svg\" width=\"60\" height=\"60\"></>',\n                    label: \"<p>No</p>\",\n                    callback: () => { resolve(false) }\n                }\n            },\n            default: \"two\"\n        }).render(true);\n    });\n    let choice = await dialog;\n\n    if (choice) await setProperty(workflow, \"ReplaceRoll\", choice);\n    await setProperty(workflow, \"LowestRoll\", lowestDieRoll);\n    await setProperty(workflow, \"BaseDie\", baseDie);\n\n    // trigger BonusDamage to apply the extra damage / adjustments outside of the normal damage roll\n    let effectData = {\n        label: \"Piercer reRoll\",\n        changes: [{ key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.Piercer`, priority: 20 }],\n        icon: thisItem.img,\n        origin: thisItem.uuid,\n        duration: { turns: 1 }\n    };\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: actorUuid, effects: [effectData] });\n    return;\n\n} else if (args[0].tag === \"DamageBonus\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    const actorUuid = workflow.tokenUuid;\n    const actorToken = canvas.tokens.get(workflow.tokenId);\n    const thisItem = actorToken.actor.items.find(i => i.name === \"Piercer\")?.data;\n    const targetToken = await fromUuid(args[0].hitTargetUuids[0] ?? \"\");\n    const targetActor = targetToken.actor;\n    let choice = await getProperty(workflow, \"ReplaceRoll\");\n    let lowestDieRoll = await getProperty(workflow, \"LowestRoll\");\n    let baseDie = await getProperty(workflow, \"BaseDie\");\n    let reRoll = null;\n\n    // remove extra damage effect \n    let effect = await findEffect(actorToken, \"Piercer reRoll\");\n    await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: actorUuid, effects: [effect.id] });\n\n    // test if critical is true, apply extra damage die\n    if (workflow?.isCritical) {\n        reRoll = await new Roll(baseDie).roll();\n        new MidiQOL.DamageOnlyWorkflow(targetActor, targetToken, reRoll.total, \"piercing\", [targetToken], reRoll, { flavor: \"Piercer Feat: Critical Extra Damage\", itemData: thisItem, itemCardId: \"new\" });\n    }\n\n    // if reRoll was selected figure out the difference and apply adjustment to the target\n    if (choice) {\n        reRoll = await new Roll(baseDie).roll();\n        if (reRoll.result < lowestDieRoll) {\n            // healback difference\n            let difference = lowestDieRoll - reRoll.result;\n            return { damageRoll: `${difference}[healing]`, flavor: \"Piercer Feat: ReRoll Adjustment\" }\n        } else {\n            // damage difference\n            let difference = reRoll.result - lowestDieRoll;\n            return { damageRoll: `${difference}[piercing]`, flavor: \"Piercer Feat: ReRoll Adjustment\" }\n        }\n    }\n    return;\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"test","system":"dnd5e","coreVersion":"9.255","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true}},"_id":"OALgx608extiJmCV"}
{"name":"Polearm Master - Opportunity Attack","type":"feat","img":"icons/weapons/polearms/pike-flared-brown.webp","data":{"description":{"value":"<p>While you are wielding a glaive, halberd, pike, quarterstaff, or spear, other creatures provoke an opportunity attack from you when they enter your reach.</p>","chat":"","unidentified":""},"source":"","activation":{"type":"reaction","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":5,"long":null,"units":"ft"},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":"str","actionType":"","attackBonus":"0","chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"","recharge":{"value":null,"charged":false},"attunement":null},"effects":[],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"id":"903603","entityTypeId":"222216831","componentId":38,"componentTypeId":1088085227,"importId":"sreo7neodrcmv53a"},"infusions":{"infused":false},"obsidian":{"source":{"type":"feat"}},"scene-packer":{"hash":"1b501b11707f205a617f1bf22b4e86cf9c777bbd","sourceId":"Item.B7PhunRsFz9vXWfx"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"midi-qol":{"fumbleThreshold":null,"effectActivation":false},"midiProperties":{"nodam":false,"fulldam":false,"halfdam":false,"rollOther":false,"critOther":false,"magicdam":false,"magiceffect":false,"concentration":false,"toggleEffect":false},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"core":{"sourceId":"Item.be1BWQDF6EkoDFuU"}},"_id":"kHXHBNpFGdCmOOxa"}
{"name":"Slasher","type":"feat","img":"icons/skills/melee/blade-tips-triple-bent-white.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>","chat":"","unidentified":""},"source":"TCoE p81","activation":{"type":"special","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":"self"},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Feat: Slasher","recharge":{"value":null,"charged":false},"attunement":0},"effects":[{"_id":"5LsTTEo1APQ0w520","changes":[{"key":"flags.midi-qol.onUseMacroName","mode":0,"value":"ItemMacro.Slasher,preDamageRoll","priority":"20"}],"disabled":false,"duration":{"startTime":null},"icon":"systems/dnd5e/icons/skills/weapon_34.jpg","label":"Slasher","origin":"Item.Aj6rMauKBQFNOrub","transfer":true,"flags":{"core":{"statusId":""},"dae":{"stackable":"none","durationExpression":"","macroRepeat":"none","specialDuration":[],"transfer":true},"ActiveAuras":{"isAura":false,"aura":"None","radius":null,"alignment":"","type":"","ignoreSelf":false,"height":false,"hidden":false,"displayTemp":false,"hostile":false,"onlyOnce":false}},"tint":null,"selectedKey":"flags.midi-qol.onUseMacroName"}],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"scene-packer":{"hash":"2fd8c0334091309a46378505df6e36ab6afc89d1","sourceId":"Item.CQe7aJptcXa6qlv1"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"itemacro":{"macro":{"data":{"_id":null,"name":"Slasher","type":"script","author":"ldRsJ6Yp5qPydWA1","img":"icons/svg/dice-target.svg","scope":"global","command":"/*****\nSlasher\n\nUSAGE: Automatic just place on a character \n\nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a weapon attack\nif (![\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) return;\n\nif (args[0].macroPass === \"preDamageRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].itemUuid);\n    let targetToken = await fromUuid(args[0].hitTargetUuids[0]);\n    let targetActor = targetToken.actor;\n    let theItem = workflow.item.data.data;\n\n    if (theItem.damage.parts[0][1] !== \"slashing\") return;   // not a slashing weapon  \n    else {\n        let effect = await findEffect(targetActor, \"Reduced Movement\");\n        if (!effect) await applyReduceMovementEffect(targetActor, args[0].uuid);\n        if (workflow.isCritical) await applyAttackDisadvantageEffect(targetActor, args[0].uuid);\n    }\n    return;\n}\n\n// Apply the fightened effect to the target\nasync function applyReduceMovementEffect(target, originUuid) {\n    let effectData = {\n        label: \"Reduced Movement\",\n        icon: \"systems/dnd5e/icons/items/equipment/boots-leather.jpg\",\n        origin: originUuid,\n        changes: [{ \"key\": \"data.attributes.movement.all\", \"value\": `-10`, \"mode\": 0, \"priority\": 20 }],\n        disabled: false,\n        flags: { dae: { specialDuration: [\"turnStartSource\"] }, }\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Apply the fightened effect to the target\nasync function applyAttackDisadvantageEffect(target, originUuid) {\n    let effectData = {\n        label: \"Attack Disadvantage\",\n        icon: \"systems/dnd5e/icons/skills/weapon_08.jpg\",\n        origin: originUuid,\n        changes: [{ \"key\": \"flags.midi-qol.disadvantage.attack.all\", \"value\": `1`, \"mode\": 0, \"priority\": 20 }],\n        disabled: false,\n        flags: { dae: { specialDuration: [\"turnStartSource\"] }, }\n    }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: target.uuid, effects: [effectData] });\n}\n\n// Function to test for an effect\nasync function findEffect(thisActor, effectName) {\n    let effectUuid = null;\n    effectUuid = thisActor?.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}","folder":null,"sort":0,"permission":{"default":0},"flags":{}}}},"core":{"sourceId":"Item.5PUe0GiheEHUomoR"},"exportSource":{"world":"test","system":"dnd5e","coreVersion":"9.255","systemVersion":"1.5.7"},"cf":{"id":"temp_b676eyusztv"},"favtab":{"isFavorite":true}},"_id":"Vb97oGL9nXMabbE0"}
{"$$deleted":true,"_id":"kHXHBNpFGdCmOOxa"}
{"name":"Polearm Master - Opportunity Attack","type":"feat","img":"icons/weapons/polearms/pike-flared-brown.webp","data":{"description":{"value":"<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 August 8 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>\n<p> </p>","chat":"","unidentified":""},"source":"","activation":{"type":"reaction","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":5,"long":null,"units":"ft"},"uses":{"value":null,"max":"","per":""},"consume":{"type":"","target":"","amount":null},"ability":"str","actionType":"","attackBonus":"0","chatFlavor":"","critical":{"threshold":null,"damage":""},"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"","recharge":{"value":null,"charged":false},"attunement":null},"effects":[],"folder":null,"sort":0,"permission":{"default":0,"ldRsJ6Yp5qPydWA1":3},"flags":{"ddbimporter":{"id":"903603","entityTypeId":"222216831","componentId":38,"componentTypeId":1088085227,"importId":"sreo7neodrcmv53a"},"infusions":{"infused":false},"obsidian":{"source":{"type":"feat"}},"scene-packer":{"hash":"710f51736d0a131dcaf9808fb1ceddc2bc95d39c","sourceId":"Item.B7PhunRsFz9vXWfx"},"spellTemplateManager":{"stmData":{"ignoreDuration":false,"spellTexture":"","useTexture":false,"alpha":50,"coneOrigin":1,"loopAnimations":true}},"midi-qol":{"fumbleThreshold":null,"effectActivation":false},"midiProperties":{"nodam":false,"fulldam":false,"halfdam":false,"rollOther":false,"critOther":false,"magicdam":false,"magiceffect":false,"concentration":false,"toggleEffect":false},"magicitems":{"enabled":false,"equipped":false,"attuned":false,"charges":"0","chargeType":"c1","destroy":false,"destroyFlavorText":"reaches 0 charges: it crumbles into ashes and is destroyed.","rechargeable":false,"recharge":"0","rechargeType":"t1","rechargeUnit":"r1","sorting":"l"},"core":{"sourceId":"Item.be1BWQDF6EkoDFuU"}},"_id":"2ixCHeDrH5uN4gkF"}
