{
  "name": "Elemental Adept (Cold)",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/ice_09.jpg",
  "data": {
    "description": {
      "value": "<p>When you gain this feat, choose one of the following damage types: acid,<strong> cold </strong>, fire, lightning, or thunder.</p>\n<ul>\n<li>Spells you cast ignore resistance to damage of the chosen type.</li>\n<li>When you roll damage for a spell you cast that deals damage of that type, you can treat any 1 on a damage die as a 2.</li>\n<li>You can select this feat multiple times. Each time you do so, you must choose a different damage type.</li>\n</ul>\n<div>Prerequisite: The ability to cast at least one spell</div>\n<p> </p>\n<details>\n<summary><strong>USEAGE: </strong> <span style=\"color:#169179\">AUTOMATED</span></summary>\nSpells must be properly configured with the damage type assigned.</details>\n<p> </p>\n<details>\n<summary><strong>SETUP:</strong></summary>\n<p>This item should be placed on the character that has the Elemental Adept Feat (damage type).</p>\n</details>\n<p> </p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v0.8 April 10 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>",
      "chat": "Spells you cast ignore resistance to cold damage, and when you roll damage for a spell you cast that deals cold damage, you can treat any 1 on a damage die as a 2.\n\n",
      "unidentified": ""
    },
    "source": "Player's Handbook",
    "activation": {
      "type": "",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": ""
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null
    },
    "consume": {
      "type": "",
      "target": null,
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "The ability to cast at least one spell",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "JqR0VfQcqj7o2sC4",
      "changes": [
        {
          "key": "flags.midi-qol.onUseMacroName",
          "mode": 0,
          "value": "ItemMacro.Elemental Adept (Cold),all",
          "priority": "1"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/skills/ice_09.jpg",
      "label": "Elemental Adept (Cold)",
      "origin": "Item.7Y7UQFlA6C65Hb7n",
      "transfer": true,
      "flags": {
        "core": {
          "statusId": ""
        },
        "dae": {
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "flags.midi-qol.onUseMacroName"
    }
  ],
  "flags": {
    "ddbimporter": {
      "featId": 54,
      "version": "2.9.8",
      "prerequisites": [
        {
          "description": "The ability to cast at least one spell",
          "prerequisiteMappings": [
            {
              "id": 39,
              "entityId": null,
              "entityTypeId": null,
              "type": "custom-value",
              "subType": "the-ability-to-cast-at-least-one-spell",
              "value": null,
              "friendlyTypeName": "Custom Value",
              "friendlySubTypeName": "The ability to cast at least one spell"
            }
          ]
        }
      ]
    },
    "obsidian": {
      "source": {
        "type": "feat"
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-feats.spxwZqUg9ypdgEug"
    },
    "scene-packer": {
      "hash": "9b7bb0bedcb486343d6b814b450bccdb191c20de",
      "sourceId": "Item.if8IOf9bKgUpIAjw"
    },
    "spellTemplateManager": {
      "stmData": {
        "ignoreDuration": false,
        "spellTexture": "",
        "useTexture": false,
        "alpha": 50,
        "coneOrigin": 1,
        "loopAnimations": true
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Elemental Adept (Cold)",
          "type": "script",
          "author": "ldRsJ6Yp5qPydWA1",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "/*****\nElemental Adept \n\nWhen you gain this feat, choose one of the following damage types: acid, cold, fire, lightning, or thunder.\n    - Spells you cast ignore resistance to damage of the chosen type. \n    - In addition, when you roll damage for a spell you cast that deals damage of that type, you can treat any 1 on a damage die as a 2.\nYou can select this feat multiple times. Each time you do so, you must choose a different damage type.\n\nBefore you roll for spell damage:\n    - retreive the damage type fromt thew DAE variable = damageType \n    - duplicate the ITEM on the workflow as OriginalItem\n    - search through all damage on the workfolow ITEM for the given damage type\n    - if found add \"min2\" to all damages\n    - test all targets for resistance to damageType\n    - for every target with resistance set vulnerability\n    - CLEANUP: restore the item and remove the vulnerability form all target(s)\n\nv0.7 April 10 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\n// make sure the attempted hit was made with a spell attack of some type\nif (![\"msak\",\"rsak\",\"save\"].includes(args[0].item.data.actionType)) return;       \nconst damageType = \"cold\";\n\nif (args[0].macroPass === \"preItemRoll\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // backup the whole original item as a property on the workflow\n    let backupItem = theItem.clone();\n    await setProperty(workflow, \"originalItem\", backupItem);\n\n    // mark all targets that are resistant to this damage type now vulnerable to cancel the resistance\n    // replace this later with a .map function  \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        const match = targetActor.data.data.traits.dr.value.find(element => {\n            if (element.includes(damageType)) markTargetVulnerable(targetActor, damageType, args[0]); });\n    }\n\n} else if (args[0].macroPass === \"preambleComplete\") {\n    const theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    let itemData = theItem.data.data;\n\n    // strip damage type in [] from the originalDamage if it exists and add \"min2\" and the damage type back in []\n    // replace this later with a .map function \n    for (let i=0; i < itemData.damage.parts.length; i++) {\n        let oldDamage = itemData.damage.parts[i][1];\n        let oldDice   = itemData.damage.parts[i][0];\n        if (oldDamage === damageType) {\n            let index = oldDice.indexOf('[');\n            if (index !== -1) oldDice = oldDice.slice(0, index); // remove everything after the first open bracket '['\n            itemData.damage.parts[i][1] = damageType;\n            itemData.damage.parts[i][0] = oldDice+\"min2\"+\"[\"+damageType+\"]\";\n            itemData.scaling.formula = itemData.scaling.formula+\"min2\";\n        }\n    }\n\n} else if (args[0].macroPass === \"postActiveEffects\") {\n    const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n    let theItem = MidiQOL.Workflow.getWorkflow(args[0].uuid).item;\n    const targets = args[0].targets;\n\n    // remove any vulnerability previously set on target(s)\n    // replace this later with a .map function \n    for (let i = 0; i < targets.length; i++) {\n        let targetActor = targets[i].actor;\n        let effect = await findEffect(targets[i], \"EAVulnerability\");\n        if (effect) await MidiQOL.socket().executeAsGM(\"removeEffects\", {actorUuid: targetActor.uuid, effects:[effect.id]});\n    }\n\n    // restore original spell damage and scaling from the backup item\n    let backupItem = await getProperty(workflow, \"originalItem\");\n    // replace this later with a .map function \n    for (let i = 0; i < backupItem.data.data.damage.parts.length; i++) theItem.data.data.damage.parts[i] = backupItem.data.data.damage.parts[i];\n    theItem.data.data.scaling = backupItem.data.data.scaling;\n\n} return; \n\n// if the character has resistance to the new damage type, set vulnerability to negate it\nasync function markTargetVulnerable(target, damageType, args) {\n    const effectData = {\n        label : \"EAVulnerability\",\n        icon : \"icons/magic/defensive/barrier-shield-dome-deflect-blue.webp\",\n        origin: args.uuid,\n        changes: [{\n          \"key\": \"data.traits.dv.value\",        \n          \"value\": `${damageType}`,\n          \"mode\": 2,\n          \"priority\": 20\n          }],\n         disabled: false\n       }\n    await MidiQOL.socket().executeAsGM(\"createEffects\", {actorUuid: target.uuid, effects: [effectData]});\n}\n\n// Function to test for an effect\nasync function findEffect (target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef=> ef.data.label === effectName);\n    return effectUuid;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "test",
      "system": "dnd5e",
      "coreVersion": "9.266",
      "systemVersion": "1.5.7"
    }
  }
}