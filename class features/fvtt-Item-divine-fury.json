{
  "name": "Divine Fury",
  "type": "feat",
  "img": "icons/magic/fire/projectile-wave-arrow.webp",
  "data": {
    "description": {
      "value": "<p>[PLACE YOUR DESCRIPTION HERE]</p>\n<p>&nbsp;</p>\n<details>\n<summary><strong>VERSION INFO</strong></summary>\n<p>v1.0 May 7 2022</p>\n<p>jbowens #0415 (Discord)</p>\n<p>https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git</p>\n</details>",
      "chat": "",
      "unidentified": ""
    },
    "source": "XGtE p11",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": 24,
      "units": "hour"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Barbarian Zealot Path",
    "recharge": {
      "value": null,
      "charged": false
    },
    "attunement": 0
  },
  "effects": [
    {
      "_id": "YJK1tQQIV2Ycrqy0",
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Divine Fury",
          "priority": "30"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/magic/fire/projectile-wave-arrow.webp",
      "label": "Divine Fury",
      "origin": "Item.5PUe0GiheEHUomoR",
      "transfer": true,
      "flags": {
        "core": {
          "statusId": ""
        },
        "dae": {
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "flags.dnd5e.DamageBonusMacro"
    }
  ],
  "flags": {
    "scene-packer": {
      "hash": "eef7055289662cb08323373d43b14b1bc9ab307e",
      "sourceId": "Item.n3rP3VtlnXnSZK40"
    },
    "spellTemplateManager": {
      "stmData": {
        "ignoreDuration": false,
        "spellTexture": "",
        "useTexture": false,
        "alpha": 50,
        "coneOrigin": 1,
        "loopAnimations": true
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Divine Fury",
          "type": "script",
          "author": "ldRsJ6Yp5qPydWA1",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "/*****\nDivine Fury | Auto Divine Fury  [there are two items to make this function]\n\nNOTE: I used Tom Posney's MIDI-QOL Sneak Attack / Auto Sneak Attack as a templete for this\n\nUSEAGE : PASSIVE\nPlease place these two items on a Barbarian Zealot the rest is automated\n \nv1.0 May 7 2022 jbowens #0415 (Discord) https://github.com/jbowensii/More-Automated-Spells-Items-and-Feats.git \n*****/\n\nif ([\"mwak\", \"rwak\"].includes(args[0].item.data.actionType)) {\n    let pcActor = token.actor;\n    const pcBarbarian = testClass(pcActor, \"barbarian\", \"Path of the Zealot\", 3);\n    if (testClass === null) ui.notifications.error(\"You are not a Barbarian Zealot of at least level 3!\");\n    else {\n        let effect = await findEffect(token, \"Rage\");\n        if (!effect) {\n            ui.notifications.error(\"You are not Raging!\");\n            return;\n        }\n\n        // Check to see if you have already made a divine fury attack this round\n        if (game.combat) {\n            const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n            const lastTime = actor.getFlag(\"midi-qol\", \"divineFuryTime\");\n            if (combatTime === lastTime) return {};  // already used divine fury this round\n        }\n\n        // check to see if autoDivineFury is active, if it is skip the prompt\n        let useDivineFury = getProperty(actor.data, \"flags.dae.autoDivineFury\");\n        if (!useDivineFury) {\n            console.log(\"MACRO | prompt user with dialog to use Divine Fury\");\n            let dialog = new Promise((resolve, reject) => {\n                new Dialog({\n                    // localize this text\n                    title: \"Conditional Damage\",\n                    content: `<p>Use Divine Fury?</p>`,\n                    buttons: {\n                        one: {\n                            icon: '<i class=\"fas fa-check\"></i>',\n                            label: \"Confirm\",\n                            callback: () => resolve(true)\n                        },\n                        two: {\n                            icon: '<i class=\"fas fa-times\"></i>',\n                            label: \"Cancel\",\n                            callback: () => { resolve(false) }\n                        }\n                    },\n                    default: \"two\"\n                }).render(true);\n            });\n            useDivineFury = await dialog;\n        }\n        if (!useDivineFury) return {};  // do not use divine fury\n\n        // the player wants to use divine fury or autoDivineFury is active\n        const diceMult = args[0].isCritical ? 2 : 1;\n        const baseDice = 1;\n        const baseBonus = Math.ceil(pcBarbarian.levels / 2);\n\n        if (game.combat) {\n            const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn / 100}`;\n            const lastTime = actor.getFlag(\"midi-qol\", \"divineFuryTime\");\n            if (combatTime !== lastTime) {\n                await actor.setFlag(\"midi-qol\", \"divineFuryTime\", combatTime)\n            }\n        }\n        return { damageRoll: `${baseDice * diceMult}d6 + ${baseBonus}`, flavor: \"Divine Fury\" };\n    }\n}\n\n// Test PC Class, Subclass and Class Level\n// RETURN the class object (TRUE) or null (FALSE)\nfunction testClass(testActor, className, subClassName, levels) {\n    let theClass = testActor.data.data.classes[className];\n    if (theClass) {\n        if ((levels > 0) && (theClass.levels >= levels)) {\n            if (subClassName === null || (theClass.subclass === subClassName)) {\n                return theClass;\n            }\n        }\n    }\n    return null;\n}\n\n// Function to test for an effect\nasync function findEffect(target, effectName) {\n    let effectUuid = null;\n    effectUuid = target?.actor.data.effects.find(ef => ef.data.label === effectName);\n    return effectUuid;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.5PUe0GiheEHUomoR"
    },
    "exportSource": {
      "world": "test",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.1"
    },
    "cf": {
      "id": "temp_ischjl2ljr",
      "path": "DDB Override#/CF_SEP/Class Features",
      "color": "#000000"
    },
    "midi-qol": {
      "onUseMacroName": ""
    },
    "midiProperties": {},
    "ddbimporter": {
      "ignoreIcon": true,
      "ignoreItemImport": true,
      "retainResourceConsumption": true
    }
  }
}